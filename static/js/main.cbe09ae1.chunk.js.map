{"version":3,"sources":["components/Restart.js","App.js","reportWebVitals.js","index.js"],"names":["Restart","restart","props","restartGame","Fragment","onClick","this","Component","App","index","state","board","squareClicked","setState","player","winArray","i","length","winCheck","c0","c1","c2","alert","bind","className","id","map","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAmBeA,G,kNAfbC,QAAU,WACR,EAAKC,MAAMC,e,uDAKX,OACE,cAAC,IAAMC,SAAP,UAEE,wBAAQC,QAAWC,KAAKL,QAAxB,gC,GAXcM,cCqHPC,E,kDAjHb,aAAc,IAAD,8BACX,gBAQFH,QAAU,SAACI,GAEsB,KAA5B,EAAKC,MAAMC,MAAMF,IACpB,EAAKG,cAAcH,IAZR,EAgBbN,YAAc,WAEZ,IAAIQ,EAAQ,EAAKD,MACJ,EAAKA,MAElBC,EAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAGzC,EAAKE,SAAS,CAACF,MAAOA,EAAOG,OAFpB,kBAtBE,EA8BbF,cAAgB,SAACH,GAEf,IAAIK,EAAS,EAAKJ,MAAMI,OACpBH,EAAQ,EAAKD,MAAMC,MAKvBG,EAAoB,gBAAVA,EAAkB,eAAO,eAInCH,EAAMF,GAASK,EAmBjB,IAhBE,IAAIC,EAAU,CACd,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAQEC,EAAI,EAAGA,EAAID,EAASE,OAAQD,IAAK,CACxC,IAAIE,EAAWH,EAASC,GACpBG,EAAKD,EAAS,GACdE,EAAKF,EAAS,GACdG,EAAKH,EAAS,GAOF,IAAbP,EAAMQ,IAAaR,EAAMQ,KAAQR,EAAMS,IAAOT,EAAMS,KAAOT,EAAMU,IAClEC,MAAM,mBAAD,OAAoBR,EAApB,oBACL,EAAKX,eACoB,IAAjBQ,EAAMM,QACdK,MAAM,YAIR,EAAKT,SAAS,CACZC,OAAQA,EACRH,MAAOA,KAhFT,EAAKD,MAAQ,CACXI,OAAQ,eACRH,MAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAE1C,EAAKC,cAAgB,EAAKA,cAAcW,KAAnB,gBANV,E,qDAwFJ,IAAD,OACN,OACE,sBAAKC,UAAY,MAAjB,UACE,6EAEA,qBAAKC,GAAK,QAAV,SAKGnB,KAAKI,MAAMC,MAAMe,KAAI,SAACC,EAAOlB,GAE5B,OAAQ,qBAAKJ,QAAW,kBAAM,EAAKA,QAAQI,IAAQgB,GAAK,SAAhD,SAA0DE,SAMtE,cAAC,EAAD,CACExB,YAAeG,KAAKH,qB,GA5GZI,aCOHqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cbe09ae1.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Restart extends Component{\n\n  restart = () => {\n    this.props.restartGame()\n  }\n\n\n  render(){\n    return(\n      <React.Fragment>\n\n        <button onClick = {this.restart}>Restart Game</button>  \n\n      </React.Fragment>\n    )\n  }\n}\nexport default Restart\n","import React, { Component } from 'react'\n// import Square from './Components/Square'\nimport './App.css'\nimport Restart from './components/Restart'\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state = {\n      player: \"ðŸ¦ \",\n      board: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",]\n    }\n    this.squareClicked = this.squareClicked.bind(this)\n  }\n\n  onClick = (index) => {\n\n    if(this.state.board[index] === \"\"){\n    this.squareClicked(index)\n    }\n  }\n\n  restartGame = () => {\n    //destructure board from state\n    let board = this.state\n    let player = this.state\n    //reset all elements in the board array to blank again\n    board = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",]\n    player = \"ðŸ¦ \"\n    \n    this.setState({board: board, player: player})\n  }\n\n\n  // squareClicked = (index, player, board) => {\n    \n  squareClicked = (index) => {\n    //destructure player and board\n    let player = this.state.player\n    let board = this.state.board\n\n    //alernating turns with emoji\n    //if player is emoji 1 then emoji 2 will be loaded\n    // else emoji one will be loaded\n    player = (player == \"ðŸ¦ \") ? \"ðŸ§¼\" : \"ðŸ¦ \"\n\n  \n\n    board[index] = player\n    //list all the different ways to win\n\n    let winArray= [\n    [0,1,2],\n    [3,4,5], \n    [6,7,8], \n    [0,3,6], \n    [1,4,7], \n    [2,5,8], \n    [0,4,8], \n    [2,4,6]\n  ]\n    //check if the filled in squares in the game fit any of the win combinations\n    //iterating through all the ways to win\n    //assigning each one of those arrays to wincheck when going thru\n    //checking the contents of the new wincheck array\n    //c0 will look thru the first element of the wincheck. should return which emoji is in that slot\n    // same with c1 and c2\n  for (let i = 0; i < winArray.length; i++) {\n    let winCheck = winArray[i]\n    let c0 = winCheck[0]\n    let c1 = winCheck[1]\n    let c2 = winCheck[2]\n\n    //if c0 c1 and c3 are all the same that means they all have the same emoji amongst them\n    //meaning they were made into a winning combination which means a winner is found\n    \n    // player = (player == \"ðŸ¦ \") ? \"ðŸ§¼\" : \"ðŸ¦ \"\n    // board[index] = player\n    if(board[c0] != \"\" && board[c0] === board[c1] && board[c1]=== board[c2]){\n      alert(`Winner! Player: ${player} is the winner!`)\n      this.restartGame()\n    }else if (board.length === 8){\n      alert(\"Tie Game\")\n    }\n  }\n\n    this.setState({\n      player: player,\n      board: board\n    })\n\n\n  }\n\n  render(){\n    return(\n      <div className = \"App\">\n        <h1>ðŸ¦  COVID TIC-TAC-TOE ðŸ¦ </h1>\n\n        <div id = \"board\">\n          {/* mapping thru the board in state to generate a game board.\n              each iteration will have an onClick connecting it to the squareClicked function above\n              each iteration will also have square rendered that follows the square id in CSS\n          */}\n          {this.state.board.map((value, index) => {\n            \n            return (<div onClick = {() => this.onClick(index)} id = \"square\">{value}</div>)\n          })}\n      </div> \n\n\n\n        <Restart \n          restartGame = {this.restartGame}\n        />  \n      </div>\n    )\n  }\n}\nexport default App\n\n\n// import React, { Component } from 'react'\n// import Square from './components/Square'\n// import './App.css'\n\n// class App extends Component{\n//   constructor(props){\n//     super(props)\n//     this.state = {\n//       squares: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n//       count: 0,\n//       player1: [],\n//       player2: [],\n//       winArray: [[0,1,2], [3,4,5], [6,7,8], [0,3,6], [1,4,7], [2,5,8], [0,4,8], [2,4,6]]\n//     }\n//   }\n\n//   // componentDidMount() {\n//   //   let treasure = Math.floor(Math.random() * this.state.squares.length)\n//   //   this.setState({treasureLocation: treasure})\n//   // }\n\n\n\n//     //PLAYER 1 + PLAYER 2\n//     //define player 1 and player 2 - set index = emoji\n//     //make count = 0 in state, set count to new num when we go through\n//     //if count is %2 = 0 => emoji 1 (if even = p1)\n//     //else emoji 2 (if odd = p2)\n//     //players cant click a filled space\n\n//   handleGamePlay = (index) => {\n//     const { squares, player1, player2, count } = this.state\n//       if(count >= 8){\n//         console.log(\"tie game\")\n//         alert(\"tie game\")\n//       }else if (count % 2 === 0){\n//       squares[index] = \"ðŸ¦ \"\n//       player1.push(index)\n//       console.log(\"player1:\", player1)\n//       console.log(\"index\", index)\n//       console.log(\"count:\", count)\n\n//       this.setState({ squares: squares, count: count + 1, player1: player1 })\n\n//     }else {\n//       squares[ index ] = \"ðŸ§¼\"\n//       player2.push(index)\n//       console.log(\"player2:\", player2)\n//       console.log(\"index\", index)\n//       console.log(\"count:\", count)\n\n//       this.setState({ squares: squares, count: count + 1, player2: player2 })\n//     }\n//   }\n\n\n//     //WIN CONDITIONS\n//     //define 8 win conditions \n//     //store players click index into an empty array\n//     //compare players click array with win conditions\n//     //create winArray containing 8 winning arrays\n//     //loop through winning arrays, compare to player click array, compare player click array to winArray\n\n//     //if players click = win array, alert WIN \n//     //else if count === 9, alert TIE\n//     //else keep playing\n\n//     //RESTART GAME FUNCTION\n//     //if game WIN OR TIE => reset game\n\n//     //CANNOT CLICK FILLED BOX\n//     //Player 1 array cannot contain values in Player2 array\n//     //Vice versa\n    \n\n\n//   render(){\n//     console.log(\"treasure:\", this.state.treasureLocation)\n//     return(\n//       <React.Fragment>\n//         <h1>TIC-TAC-TOE</h1>\n        \n//         <div id=\"gameboard\">\n//         { this.state.squares.map((value, index) => {\n//           return (\n//             <Square \n//               value = { value }\n//               key = { index }\n//               index = { index }\n//               handleGamePlay = { this.handleGamePlay }\n//             />\n//           )\n//         })\n//         }\n//         </div>\n\n//       </React.Fragment>\n//     )\n//   }\n// }\n// export default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}